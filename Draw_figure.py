
"""===========================
Plots with different scales
===========================

Demonstrate how to do two plots on the same axes with different left and
right scales.

The trick is to use *two different axes* that share the same *x* axis.
You can use separate `matplotlib.ticker` formatters and locators as
desired since the two axes are independent.

Such axes are generated by calling the `Axes.twinx` method.  Likewise,
`Axes.twiny` is available to generate axes that share a *y* axis but
have different top and bottom scales.

The twinx and twiny methods are also exposed as pyplot functions.

"""

import numpy as np
import matplotlib.pyplot as plt

"""===========================
Plots with Q_min
===========================
"""
fig, ax1 = plt.subplots()

#
t = [60, 80, 100, 120, 140, 160, 180]
s1 = [181198034, 181209584, 181281119, 181653077, 182694493, 183497888, 184019931]
width = 10.0 
ax1.bar(t, s1,width, color='white',align='center', label = 'Total cost',hatch= '//')
ax1.set_xlabel('% Q_min')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('Total system cost', color='black')
plt.ylim((175000000,187000000))
ax1.tick_params('y', colors='black')

ax2 = ax1.twinx()
s2 = [16, 15, 15, 14, 11,10, 8]
ax2.plot(t, s2, "-o", color="black",label = 'N° suppliers')
plt.ylim((5,20))
ax2.set_ylabel('Total number of suppliers', color='black')
ax2.tick_params('y', colors='black')

fig.tight_layout()


# Set the title of the chart
h1, l1 = ax1.get_legend_handles_labels()
h2, l2 = ax2.get_legend_handles_labels()
ax1.legend(h1+h2, l1+l2, loc='best')
plt.show()

"""===========================
Plots with mcost
===========================
"""
fig, ax1 = plt.subplots()


t = [50,100, 200, 300,400]

s1 = [ 181095274, 181281119 , 181631513, 181974752, 182294813]
width = 35.0 
ax1.bar(t, s1,width, color='white',align='center', label = 'Total cost',hatch= '//')
ax1.set_xlabel('% mcost')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('Total system cost', color='black')
plt.ylim((175000000,187000000))
ax1.tick_params('y', colors='black')

ax2 = ax1.twinx()
s2 = [15, 15,14,13,13]
ax2.plot(t, s2, "-o", color="black",label = 'N° suppliers')
plt.ylim((5,20))
ax2.set_ylabel('Total number of suppliers', color='black')
ax2.tick_params('y', colors='black')

fig.tight_layout()


# Set the title of the chart
h1, l1 = ax1.get_legend_handles_labels()
h2, l2 = ax2.get_legend_handles_labels()
ax1.legend(h1+h2, l1+l2, loc='best')
plt.show()


"""===========================
Plots with costA_M
===========================
"""
fig, ax1 = plt.subplots()


t = [90, 100, 110, 120, 130]

s1 = [ 179828032, 181281119, 181351636, 181357040, 181377684]
width = 5.0 
ax1.bar(t, s1,width, color='white',align='center', label = 'Total cost',hatch= '//')
ax1.set_xlabel('% $costA^I$')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('Total system cost', color='black')
plt.ylim((175000000,185000000))
ax1.tick_params('y', colors='black')

ax2 = ax1.twinx()
s2 = [8, 15, 16, 16, 16]
ax2.plot(t, s2, "-o", color="black",label = 'N° suppliers')
plt.ylim((5,20))
ax2.set_ylabel('Total number of suppliers', color='black')
ax2.tick_params('y', colors='black')

fig.tight_layout()


# Set the title of the chart
h1, l1 = ax1.get_legend_handles_labels()
h2, l2 = ax2.get_legend_handles_labels()
ax1.legend(h1+h2, l1+l2, loc='best')
plt.show()
